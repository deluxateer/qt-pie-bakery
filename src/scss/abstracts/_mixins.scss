// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// helper that sets background color and text color (black | white) for you
/// @author Deluxateer
/// @param {Color} $bgc - background color
/// @param {Color} $on-light [#000] - text color to use for light backgrounds
/// @param {Color} $on-dark [#fff] - text color to use for dark backgrounds
/// @param {Number} $threshold [50] - percentage where color changes should occur around
@mixin text-color-bgc($bgc, $on-light: #000, $on-dark: #fff, $threshold: 50) {
  color: contrast-text($bgc, $on-light, $on-dark, $threshold);
  background-color: $bgc;
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Makes into a flex container and fully centers its children
/// @author Deluxateer
@mixin flex-center-children {
  display: flex;
  justify-content: center;
  align-items: center;
}

/// Makes into a flex container and centers its children
/// with space between on the main axis
/// @author Deluxateer
@mixin flex-space-between-children {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/// Media query breakpoint wrapper
/// @author Hugo Giraudel
/// @param {String} $name - name of the breakpoint ('small', 'medium', etc.)
/// @link https://www.sitepoint.com/managing-responsive-breakpoints-sass/
@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  // If the key doesn't exist in the map
  @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
      + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Add rules to initialize an element for animation
/// @author Deluxateer
/// @param {Number} $x - x coordinate
/// @param {Number} $y - y coordinate
/// @param {Number} $z - z coordinate
/// @param {Number} $duration - time duration for animation
/// @param {Number} $rotation - number of degrees to rotate
/// @param {Number} $scale - percentage to scale (0 - 1)
@mixin animate($x, $y: 0, $z: 0, $duration: 0.9s, $rotation: 0deg, $scale: 1) {
  transform: translate3d($x, $y, $z) rotate($rotation) scale($scale);
  transition: transform $duration, visibility $duration, opacity $duration ease-in-out;
  visibility: hidden;
  opacity: 0;
}
